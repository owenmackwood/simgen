
typedef signed int MKL_INT;
typedef unsigned int MKL_UINT;
void inner_impl(const MKL_INT n_steps, const float dt, const float tau_exc, const float tau_inh, const float tau_slow, const MKL_INT steps_per_frame, const MKL_UINT seed, const float rho0, const MKL_INT n_calibrate, const float alpha_r, const float alpha_p, const float f_max, const MKL_INT * e2i_indptr, const MKL_INT * e2i_indices, const MKL_INT * i2e_indptr, const MKL_INT * i2e_indices, const MKL_INT plasticity_on, const MKL_INT plasticity_off, const float * in_exc_mean, const float * in_inh_mean, const float * in_exc_patterns, float * in_exc_state, float * in_inh_state, const MKL_INT * input_pattern_epochs, const MKL_INT * input_pattern_index, float * h_exc, float * h_inh, float * r_exc_rec, float * r_inh_rec, float * h_exc_rec, float * h_inh_rec, float * plastic_mean, float * plastic_var, float * sp_rates, const float rho_calibrate, const float calibration_eta, const float * e2e_data, const MKL_INT * e2e_indptr, const MKL_INT * e2e_indices, const float * i2i_data, const MKL_INT * i2i_indptr, const MKL_INT * i2i_indices, float * e2i_data, const MKL_INT * e2i_data_i, const MKL_INT * e2i_data_j, const float j_max, const float eta_i2e, float * i2e_data, const MKL_INT * i2e_data_i, const MKL_INT * i2e_data_j, const float j_i2e_max, const float eta, const float bls_c, const float bls_tau, const float bls_alpha_lb, float * eta_rec, float * error_rec, float * bls_t_rec, const MKL_INT update_weights_n, const float in_ou_exc_tau, const float in_ou_exc_sigma);